{"version":3,"file":"static/js/816.a3567e3f.chunk.js","mappings":"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","sources":["firebase/firebase-config.js","pages/JoinQueue.js"],"sourcesContent":["// src/firebase/firebase-config.js\r\nimport { initializeApp } from \"https://www.gstatic.com/firebasejs/10.11.1/firebase-app.js\";\r\nimport { getAuth } from \"https://www.gstatic.com/firebasejs/10.11.1/firebase-auth.js\";\r\nimport { getFirestore } from \"https://www.gstatic.com/firebasejs/10.11.1/firebase-firestore.js\";\r\nimport { getMessaging, getToken, onMessage } from \"https://www.gstatic.com/firebasejs/10.11.1/firebase-messaging.js\";\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyAhBlyXYwfLE1rXPcWRiouJfsp6gIpG894\",\r\n  authDomain: \"smartq-d015b.firebaseapp.com\",\r\n  projectId: \"smartq-d015b\",\r\n  storageBucket: \"smartq-d015b.firebasestorage.app\",\r\n  messagingSenderId: \"452644823738\",\r\n  appId: \"1:452644823738:web:7a133f086ff93200b39883\"\r\n};\r\n\r\nconst app = initializeApp(firebaseConfig);\r\nconst auth = getAuth(app);\r\nconst db = getFirestore(app);\r\nconst messaging = getMessaging(app);\r\n\r\n// Request notification permission if needed\r\nexport async function requestNotificationPermission() {\r\n  try {\r\n    const token = await getToken(messaging, { vapidKey: \"YOUR_VAPID_PUBLIC_KEY\" });\r\n    if (token) {\r\n      console.log(\"Notification Token:\", token);\r\n      return token;\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Notification permission error:\", error);\r\n  }\r\n}\r\n\r\nonMessage(messaging, (payload) => {\r\n  console.log(\"Message received:\", payload);\r\n  alert(`Notification: ${payload.notification.title} - ${payload.notification.body}`);\r\n});\r\n\r\nexport { auth, db, messaging };\r\n","// src/pages/JoinQueue.js\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nimport { db } from '../firebase/firebase-config';\r\nimport { doc, onSnapshot, updateDoc, arrayUnion } from 'https://www.gstatic.com/firebasejs/10.11.1/firebase-firestore.js';\r\n\r\nconst JoinQueue = () => {\r\n  //State variables to hold queue details and form info\r\n  const [queueName, setQueueName] = useState('');\r\n  const [queueCount, setQueueCount] = useState(0);\r\n  const [estWaitTime, setEstWaitTime] = useState(0);\r\n  const [errorMsg, setErrorMsg] = useState('');\r\n  const [joinInfo, setJoinInfo] = useState({ name: '', email: '' });\r\n  const [loading, setLoading] = useState(true);\r\n  const [queueData, setQueueData] = useState(null);\r\n\r\n  //Hooks to read the current URL and change pages\r\n  const location = useLocation(); // Gives access to URL and its search string\r\n  const navigate = useNavigate(); // Allows programmatic page navigation\r\n\r\n  //Parse the queueId from the URL’s query parameters\r\n  const searchParams = new URLSearchParams(location.search);\r\n  const queueId = searchParams.get('queueId');\r\n\r\n  // Define the average service time per user (in minutes)\r\n  const averageServiceTime = 5;\r\n\r\n\r\n  //useEffect for initial load and real‑time updates\r\n  useEffect(() => {\r\n    // If no queueId is provided, immediately redirect.\r\n    if (!queueId) {\r\n      navigate('/invalid-queue');\r\n      return;\r\n    }\r\n\r\n    // Listen in real-time for changes in the queue document.\r\n    const queueRef = doc(db, \"queues\", queueId);\r\n    const unsubscribe = onSnapshot(queueRef, (queueSnap) => {\r\n      // If document doesn't exist, redirect.\r\n      if (!queueSnap.exists()) {\r\n        navigate('/invalid-queue');\r\n        return;\r\n      }\r\n      const data = queueSnap.data(); // Get the latest queue data\r\n      \r\n      // If the queue is paused, redirect to the QueuePaused page.\r\n      if (data.status !== \"active\") {\r\n        navigate('/queue-paused');\r\n        return;\r\n      }\r\n      \r\n      // Update state with the latest data.\r\n      setQueueData(data);\r\n      setQueueName(data.name || 'Queue');\r\n      const count = data.users ? data.users.length : 0;\r\n      setQueueCount(count);\r\n      // Calculate wait time\r\n      setEstWaitTime(count * averageServiceTime);\r\n      setLoading(false); // Data has loaded\r\n    }, (error) => {\r\n      //Handle any errors during listening\r\n      console.error(\"Error listening to queue:\", error);\r\n      setErrorMsg(\"Error loading queue details.\");\r\n      setLoading(false);\r\n    });\r\n\r\n    // Clean up the listener on component unmount.\r\n    return () => unsubscribe();\r\n  }, [queueId, navigate, averageServiceTime]);\r\n\r\n\r\n  //Function to handle the form submission when a user joins\r\n  const handleJoin = async (e) => {\r\n    e.preventDefault();  // Prevent page reload\r\n    const { name, email } = joinInfo;  // Get name & email from state\r\n    if (!name || !email) return;     // Do nothing if fields are empty\r\n    const userId = email; // Using email as a unique identifier\r\n\r\n    // make sure the queue is still active at join time.\r\n    if (queueData && queueData.status !== \"active\") {\r\n      navigate('/queue-paused');\r\n      return;\r\n    }\r\n    // Prevent duplicate joining.\r\n    if (queueData && queueData.users && queueData.users.find(u => u.userId === userId)) {\r\n      alert(\"You are already in the queue.\");\r\n      navigate(`/queue-status?queueId=${queueId}&userId=${encodeURIComponent(userId)}`);\r\n      return;\r\n    }\r\n\r\n    // Calculate new position based on the latest user count.\r\n    const newPosition = (queueData.users && queueData.users.length) || 0;\r\n    const newUser = { userId, name, email, position: newPosition };\r\n\r\n    try {\r\n      const queueRef = doc(db, \"queues\", queueId);\r\n      // Add the new user to the queue.\r\n      await updateDoc(queueRef, {\r\n        users: arrayUnion(newUser)\r\n      });\r\n      navigate(`/queue-status?queueId=${queueId}&userId=${encodeURIComponent(userId)}`);\r\n    } catch (error) {\r\n      console.error(\"Error joining queue:\", error);\r\n      setErrorMsg(\"Error joining queue. Please try again later.\");\r\n    }\r\n  };\r\n\r\n  // Show loading text while queue details are being fetched\r\n  if (loading) return <p>Loading queue details...</p>;\r\n\r\n\r\n  // Render the join-queue form and queue details\r\n  return (\r\n    <div\r\n      className=\"queue-status\"\r\n      style={{ maxWidth: '400px', margin: '0 auto', padding: '1rem', textAlign: 'center' }}\r\n    >\r\n      <h2>{queueName} - Join the Queue</h2>\r\n      <p>Current number in queue: {queueCount}</p>\r\n      <p>Estimated wait time: {estWaitTime} minutes</p>\r\n      {/* Show any error messages */}\r\n      {errorMsg && <p style={{ color: 'red' }}>{errorMsg}</p>}\r\n      <form onSubmit={handleJoin} style={{ display: 'flex', flexDirection: 'column', gap: '1rem' }}>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Enter your name\"\r\n          value={joinInfo.name}\r\n          onChange={(e) => setJoinInfo({ ...joinInfo, name: e.target.value })}\r\n          required\r\n          style={{ padding: '0.5rem', fontSize: '16px' }}\r\n        />\r\n        <input\r\n          type=\"email\"\r\n          placeholder=\"Enter your email\"\r\n          value={joinInfo.email}\r\n          onChange={(e) => setJoinInfo({ ...joinInfo, email: e.target.value })}\r\n          required\r\n          style={{ padding: '0.5rem', fontSize: '16px' }}\r\n        />\r\n        <button\r\n          type=\"submit\"\r\n          className=\"btn\"\r\n          style={{ padding: '0.75rem', fontSize: '16px' }}\r\n        >\r\n          Join Queue\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default JoinQueue;\r\n"],"names":["firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","app","initializeApp","auth","getAuth","db","getFirestore","messaging","getMessaging","onMessage","payload","console","log","alert","notification","title","body","JoinQueue","queueName","setQueueName","useState","queueCount","setQueueCount","estWaitTime","setEstWaitTime","errorMsg","setErrorMsg","joinInfo","setJoinInfo","name","email","loading","setLoading","queueData","setQueueData","location","useLocation","navigate","useNavigate","queueId","URLSearchParams","search","get","useEffect","queueRef","doc","unsubscribe","onSnapshot","queueSnap","exists","data","status","count","users","length","error","_jsx","children","_jsxs","className","style","maxWidth","margin","padding","textAlign","color","onSubmit","async","e","preventDefault","userId","find","u","encodeURIComponent","newPosition","newUser","position","updateDoc","arrayUnion","display","flexDirection","gap","type","placeholder","value","onChange","target","required","fontSize"],"sourceRoot":""}