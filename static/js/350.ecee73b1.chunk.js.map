{"version":3,"file":"static/js/350.ecee73b1.chunk.js","mappings":"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","sources":["components/QRCodeGenerator.js","firebase/firebase-config.js","pages/QueueControls.js"],"sourcesContent":["// src/components/QRCodeGenerator.js\r\nimport React from 'react';\r\nimport { QRCodeCanvas } from 'qrcode.react';\r\n\r\nconst QRCodeGenerator = ({ queueId, width = 150, height = 150 }) => {\r\n  let baseUrl;\r\n  if (process.env.NODE_ENV === 'development') {\r\n    // In development, use the origin (e.g., http://localhost:3000)\r\n    baseUrl = window.location.origin;\r\n  } else {\r\n    // In production on GitHub Pages, force the base URL to the full absolute URL.\r\n    baseUrl = \"https://mohammadyaslam.github.io/smartq-react\";\r\n  }\r\n  \r\n  // Remove any trailing slashes to avoid double slashes in the URL\r\n  baseUrl = baseUrl.replace(/\\/+$/, \"\");\r\n\r\n  // Construct the full QR code URL using HashRouter routing\r\n  const qrText = `${baseUrl}/#/join-queue?queueId=${queueId}`;\r\n  \r\n  console.log(\"QR Code URL:\", qrText); // For debugging: check the console output in production\r\n\r\n  return <QRCodeCanvas value={qrText} size={width} />;\r\n};\r\n\r\nexport default QRCodeGenerator;\r\n","// src/firebase/firebase-config.js\r\nimport { initializeApp } from \"https://www.gstatic.com/firebasejs/10.11.1/firebase-app.js\";\r\nimport { getAuth } from \"https://www.gstatic.com/firebasejs/10.11.1/firebase-auth.js\";\r\nimport { getFirestore } from \"https://www.gstatic.com/firebasejs/10.11.1/firebase-firestore.js\";\r\nimport { getMessaging, getToken, onMessage } from \"https://www.gstatic.com/firebasejs/10.11.1/firebase-messaging.js\";\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyAhBlyXYwfLE1rXPcWRiouJfsp6gIpG894\",\r\n  authDomain: \"smartq-d015b.firebaseapp.com\",\r\n  projectId: \"smartq-d015b\",\r\n  storageBucket: \"smartq-d015b.firebasestorage.app\",\r\n  messagingSenderId: \"452644823738\",\r\n  appId: \"1:452644823738:web:7a133f086ff93200b39883\"\r\n};\r\n\r\nconst app = initializeApp(firebaseConfig);\r\nconst auth = getAuth(app);\r\nconst db = getFirestore(app);\r\nconst messaging = getMessaging(app);\r\n\r\n// Request notification permission if needed\r\nexport async function requestNotificationPermission() {\r\n  try {\r\n    const token = await getToken(messaging, { vapidKey: \"YOUR_VAPID_PUBLIC_KEY\" });\r\n    if (token) {\r\n      console.log(\"Notification Token:\", token);\r\n      return token;\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Notification permission error:\", error);\r\n  }\r\n}\r\n\r\nonMessage(messaging, (payload) => {\r\n  console.log(\"Message received:\", payload);\r\n  alert(`Notification: ${payload.notification.title} - ${payload.notification.body}`);\r\n});\r\n\r\nexport { auth, db, messaging };\r\n","// src/pages/QueueControls.js\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { db, auth } from '../firebase/firebase-config';\r\nimport { \r\n  collection, addDoc, deleteDoc, updateDoc, onSnapshot, doc, getDoc, query, where \r\n} from 'https://www.gstatic.com/firebasejs/10.11.1/firebase-firestore.js';\r\nimport { onAuthStateChanged } from 'https://www.gstatic.com/firebasejs/10.11.1/firebase-auth.js';\r\nimport QRCodeGenerator from '../components/QRCodeGenerator';\r\n\r\nconst QueueControls = () => {\r\n  const [queues, setQueues] = useState([]);\r\n  const [queueName, setQueueName] = useState('');\r\n  const [loading, setLoading] = useState(true);\r\n  const [actionPending, setActionPending] = useState({}); // to track pending operations on a queue\r\n  const navigate = useNavigate();\r\n  const queueCollection = collection(db, \"queues\");\r\n\r\n  useEffect(() => {\r\n    const unsubscribeAuth = onAuthStateChanged(auth, (user) => {\r\n      if (user) {\r\n        const q = query(queueCollection, where(\"adminId\", \"==\", user.uid));\r\n        const unsubscribe = onSnapshot(q, (snapshot) => {\r\n          const allQueues = snapshot.docs.map(docSnap => ({ id: docSnap.id, ...docSnap.data() }));\r\n          setQueues(allQueues);\r\n          setLoading(false);\r\n        });\r\n        return () => unsubscribe();\r\n      } else {\r\n        navigate('/auth');\r\n      }\r\n    });\r\n    return unsubscribeAuth;\r\n  }, [navigate, queueCollection]);\r\n\r\n  const createQueue = async (e) => {\r\n    e.preventDefault();\r\n    if (!queueName.trim()) return;\r\n    try {\r\n      const user = auth.currentUser;\r\n      const newQueue = {\r\n        name: queueName,\r\n        adminId: user.uid,\r\n        status: \"active\",\r\n        users: [],\r\n        currentPosition: 1,\r\n        estimatedWaitTime: 0,\r\n        createdAt: new Date()\r\n      };\r\n      await addDoc(queueCollection, newQueue);\r\n      setQueueName('');\r\n    } catch (error) {\r\n      console.error(\"Error creating queue:\", error);\r\n    }\r\n  };\r\n\r\n  const toggleQueueStatus = async (queueId, currentStatus) => {\r\n    setActionPending(prev => ({ ...prev, [queueId]: true }));\r\n    try {\r\n      const queueDoc = doc(db, \"queues\", queueId);\r\n      // Toggle status between \"active\" and \"paused\"\r\n      await updateDoc(queueDoc, { status: currentStatus === \"active\" ? \"paused\" : \"active\" });\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n    setActionPending(prev => ({ ...prev, [queueId]: false }));\r\n  };\r\n\r\n  const nextQueue = async (queueId) => {\r\n    setActionPending(prev => ({ ...prev, [queueId]: true }));\r\n    try {\r\n      const queueDoc = doc(db, \"queues\", queueId);\r\n      const queueSnap = await getDoc(queueDoc);\r\n      if (!queueSnap.exists()) return;\r\n      let users = queueSnap.data().users || [];\r\n      // Remove the user with position 0 (currently being served)\r\n      users = users.filter(u => u.position !== 0);\r\n      // Reassign positions based on the sorted original order\r\n      users.sort((a, b) => a.position - b.position);\r\n      users = users.map((user, index) => ({ ...user, position: index }));\r\n      await updateDoc(queueDoc, { users });\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n    setActionPending(prev => ({ ...prev, [queueId]: false }));\r\n  };\r\n\r\n  const deleteQueue = async (queueId) => {\r\n    if (!window.confirm(\"Are you sure you want to delete this queue? This action cannot be undone.\")) return;\r\n    setActionPending(prev => ({ ...prev, [queueId]: true }));\r\n    try {\r\n      await deleteDoc(doc(db, \"queues\", queueId));\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n    setActionPending(prev => ({ ...prev, [queueId]: false }));\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <h1>Queue Management</h1>\r\n      <button className=\"btn\" onClick={() => navigate('/admin/dashboard')}>Back to Dashboard</button>\r\n      <section style={{ marginBottom: '2rem' }}>\r\n        <h2>Create a New Queue</h2>\r\n        <form onSubmit={createQueue}>\r\n          <input \r\n            type=\"text\" \r\n            placeholder=\"Enter Queue Name\" \r\n            value={queueName} \r\n            onChange={(e) => setQueueName(e.target.value)} \r\n            required \r\n            style={{ width: '100%', marginBottom: '0.5rem', padding: '0.5rem' }}\r\n          />\r\n          <button type=\"submit\" className=\"btn\">Create Queue</button>\r\n        </form>\r\n      </section>\r\n      <section>\r\n        <h2>Active Queues</h2>\r\n        {loading ? (\r\n          <p>Loading queues...</p>\r\n        ) : queues.length === 0 ? (\r\n          <p>No queues found. Create one above.</p>\r\n        ) : (\r\n          queues.map((queue) => {\r\n            // Find the user who is currently being served (position === 0)\r\n            const servedUser = queue.users ? queue.users.find(u => u.position === 0) : null;\r\n            const servedMsg = servedUser \r\n              ? `You are serving now: ${servedUser.name}, ${servedUser.email}`\r\n              : \"You are serving now: No one\";\r\n\r\n            return (\r\n              <div key={queue.id} className=\"queue-card\" style={{ marginBottom: '2rem', padding: '1rem', border: '1px solid #ddd', borderRadius: '8px' }}>\r\n                <h3>{queue.name}</h3>\r\n                <p>Status: <span>{queue.status}</span></p>\r\n                <p>Users: {queue.users ? queue.users.filter(u => u.position > 0).length : 0}</p>\r\n                <p>{servedMsg}</p>\r\n                {/* QR Code Display */}\r\n                <div style={{ marginBottom: '1rem' }}>\r\n                  <QRCodeGenerator queueId={queue.id} />\r\n                </div>\r\n                {/* Buttons container */}\r\n                <div style={{ display: 'flex', gap: '1rem', justifyContent: 'center' }}>\r\n                  <button \r\n                    className=\"btn\" \r\n                    onClick={() => toggleQueueStatus(queue.id, queue.status)}\r\n                    disabled={actionPending[queue.id]}\r\n                  >\r\n                    {queue.status === 'active' ? 'Pause' : 'Resume'}\r\n                  </button>\r\n                  <button \r\n                    className=\"btn\" \r\n                    onClick={() => nextQueue(queue.id)}\r\n                    disabled={actionPending[queue.id]}\r\n                  >\r\n                    Next\r\n                  </button>\r\n                  <button \r\n                    className=\"btn delete-btn\" \r\n                    onClick={() => deleteQueue(queue.id)}\r\n                    disabled={actionPending[queue.id]}\r\n                  >\r\n                    Delete\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            );\r\n          })\r\n        )}\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default QueueControls;\r\n"],"names":["_ref","baseUrl","queueId","width","height","replace","qrText","console","log","_jsx","QRCodeCanvas","value","size","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","app","initializeApp","auth","getAuth","db","getFirestore","messaging","getMessaging","onMessage","payload","alert","notification","title","body","QueueControls","queues","setQueues","useState","queueName","setQueueName","loading","setLoading","actionPending","setActionPending","navigate","useNavigate","queueCollection","collection","useEffect","onAuthStateChanged","user","q","query","where","uid","unsubscribe","onSnapshot","snapshot","allQueues","docs","map","docSnap","id","data","_jsxs","className","children","onClick","style","marginBottom","onSubmit","async","e","preventDefault","trim","currentUser","newQueue","name","adminId","status","users","currentPosition","estimatedWaitTime","createdAt","Date","addDoc","error","type","placeholder","onChange","target","required","padding","length","queue","servedUser","find","u","position","servedMsg","email","border","borderRadius","filter","QRCodeGenerator","display","gap","justifyContent","currentStatus","prev","queueDoc","doc","updateDoc","toggleQueueStatus","disabled","queueSnap","getDoc","exists","sort","a","b","index","nextQueue","window","confirm","deleteDoc","deleteQueue"],"sourceRoot":""}