{"version":3,"file":"static/js/102.bb07b41f.chunk.js","mappings":"iPAMA,MAAMA,EAAiB,CACrBC,OAAQ,0CACRC,WAAY,+BACZC,UAAW,eACXC,cAAe,mCACfC,kBAAmB,eACnBC,MAAO,6CAGHC,GAAMC,EAAAA,EAAAA,eAAcR,GACpBS,GAAOC,EAAAA,EAAAA,SAAQH,GACfI,GAAKC,EAAAA,EAAAA,cAAaL,GAClBM,GAAYC,EAAAA,EAAAA,cAAaP,IAe/BQ,EAAAA,EAAAA,WAAUF,GAAYG,IACpBC,QAAQC,IAAI,oBAAqBF,GACjCG,MAAM,iBAAiBH,EAAQI,aAAaC,WAAWL,EAAQI,aAAaE,OAAO,I,gLC7BrF,MA6EA,EA7EoBC,KAClB,MAAOC,EAAUC,IAAeC,EAAAA,EAAAA,UAAS,OAClCC,EAAaC,IAAkBF,EAAAA,EAAAA,UAAS,OACxCG,EAAgBC,IAAqBJ,EAAAA,EAAAA,UAAS,eAC9CK,EAAUC,IAAeN,EAAAA,EAAAA,WAAS,IAClCO,EAAeC,IAAoBR,EAAAA,EAAAA,WAAS,IAC5CS,IAAgBC,EAAAA,EAAAA,MACjBC,EAAUF,EAAaG,IAAI,WAC3BC,EAASJ,EAAaG,IAAI,UAC1BE,GAAWC,EAAAA,EAAAA,OAKjBC,EAAAA,EAAAA,YAAU,KACR,IAAKH,EAEH,YADAC,EAAS,uBAAuBH,KAGlC,MAAMM,GAAWC,EAAAA,EAAAA,KAAIjC,EAAAA,GAAI,SAAU0B,GAC7BQ,GAAcC,EAAAA,EAAAA,YAAWH,GAAWI,IACxC,IAAKA,EAAQC,SAGX,OAFA7B,MAAM,gCACNqB,EAAS,kBAGX,MAAMS,EAAOF,EAAQE,OAEfC,EAAcD,EAAKE,MAAQF,EAAKE,MAAMC,MAAKC,GAAKA,EAAEd,SAAWA,IAAU,KACzEW,GACFpB,EAAkB,WAAWoB,EAAYI,SAASJ,EAAYK,UAC9D9B,EAAYyB,EAAY1B,UAExBI,EArBqB,EAqBNsB,EAAY1B,UACE,IAAzB0B,EAAY1B,UACdU,GAAiB,GACZH,IACHC,GAAY,GACZb,MAAM,yBAGRe,GAAiB,IAEVD,GACTO,EAAS,YACX,IAEF,MAAO,IAAMK,GAAa,GACzB,CAACR,EAASE,EAAQC,EAAUT,EAAUE,EApCd,IAmD3B,OACEuB,EAAAA,EAAAA,MAAA,OAAKC,UAAU,eAAcC,SAAA,EAC3BC,EAAAA,EAAAA,KAAA,OAAKC,GAAG,iBAAgBF,SAAE7B,KAC1B8B,EAAAA,EAAAA,KAAA,MAAAD,SAAI,kBACJF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,mBAAkBC,SAAA,EAC/BC,EAAAA,EAAAA,KAAA,MAAAD,SAAKzB,EAAgB,kBAAoB,mBACzC0B,EAAAA,EAAAA,KAAA,OAAKF,UAAU,kBAAiBC,SAAElC,QAEpCgC,EAAAA,EAAAA,MAAA,KAAAE,SAAA,CAAG,wBAAsB/B,EAAY,eACrCgC,EAAAA,EAAAA,KAAA,UAAQC,GAAG,gBAAgBH,UAAU,MAAMI,QAtB5BC,UACjB,MAAMnB,GAAWC,EAAAA,EAAAA,KAAIjC,EAAAA,GAAI,SAAU0B,GAC7B0B,QAAkBC,EAAAA,EAAAA,QAAOrB,GAC/B,IAAKoB,EAAUf,SAAU,OAEzB,IAAIiB,EADSF,EAAUd,OACCE,MAAMe,QAAOb,GAAKA,EAAEd,SAAWA,IAEvD0B,EAAeA,EAAaE,KAAI,CAACd,EAAGe,KAAK,IAAWf,EAAG7B,SAAU4C,YAC3DC,EAAAA,EAAAA,WAAU1B,EAAU,CAAEQ,MAAOc,IACnC9C,MAAM,4BACNqB,EAASP,EAAgB,YAAc,uBAAuBI,IAAU,EAYPqB,SAAC,kBAC5D,E","sources":["firebase/firebase-config.js","pages/QueueStatus.js"],"sourcesContent":["// src/firebase/firebase-config.js\r\nimport { initializeApp } from \"https://www.gstatic.com/firebasejs/10.11.1/firebase-app.js\";\r\nimport { getAuth } from \"https://www.gstatic.com/firebasejs/10.11.1/firebase-auth.js\";\r\nimport { getFirestore } from \"https://www.gstatic.com/firebasejs/10.11.1/firebase-firestore.js\";\r\nimport { getMessaging, getToken, onMessage } from \"https://www.gstatic.com/firebasejs/10.11.1/firebase-messaging.js\";\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyAhBlyXYwfLE1rXPcWRiouJfsp6gIpG894\",\r\n  authDomain: \"smartq-d015b.firebaseapp.com\",\r\n  projectId: \"smartq-d015b\",\r\n  storageBucket: \"smartq-d015b.firebasestorage.app\",\r\n  messagingSenderId: \"452644823738\",\r\n  appId: \"1:452644823738:web:7a133f086ff93200b39883\"\r\n};\r\n\r\nconst app = initializeApp(firebaseConfig);\r\nconst auth = getAuth(app);\r\nconst db = getFirestore(app);\r\nconst messaging = getMessaging(app);\r\n\r\n// Request notification permission if needed\r\nexport async function requestNotificationPermission() {\r\n  try {\r\n    const token = await getToken(messaging, { vapidKey: \"YOUR_VAPID_PUBLIC_KEY\" });\r\n    if (token) {\r\n      console.log(\"Notification Token:\", token);\r\n      return token;\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Notification permission error:\", error);\r\n  }\r\n}\r\n\r\nonMessage(messaging, (payload) => {\r\n  console.log(\"Message received:\", payload);\r\n  alert(`Notification: ${payload.notification.title} - ${payload.notification.body}`);\r\n});\r\n\r\nexport { auth, db, messaging };\r\n","// src/pages/QueueStatus.js\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useSearchParams, useNavigate } from 'react-router-dom';\r\nimport { db } from '../firebase/firebase-config';\r\nimport { doc, onSnapshot, updateDoc, getDoc } from 'https://www.gstatic.com/firebasejs/10.11.1/firebase-firestore.js';\r\n\r\nconst QueueStatus = () => {\r\n  const [position, setPosition] = useState('--');\r\n  const [estWaitTime, setEstWaitTime] = useState('--');\r\n  const [welcomeMessage, setWelcomeMessage] = useState(\"Loading...\");\r\n  const [notified, setNotified] = useState(false);\r\n  const [isBeingServed, setIsBeingServed] = useState(false);\r\n  const [searchParams] = useSearchParams();\r\n  const queueId = searchParams.get('queueId');\r\n  const userId = searchParams.get('userId');\r\n  const navigate = useNavigate();\r\n\r\n  // Average service time in minutes per user\r\n  const averageServiceTime = 5;\r\n\r\n  useEffect(() => {\r\n    if (!userId) {\r\n      navigate(`/join-queue?queueId=${queueId}`);\r\n      return;\r\n    }\r\n    const queueRef = doc(db, \"queues\", queueId);\r\n    const unsubscribe = onSnapshot(queueRef, (docSnap) => {\r\n      if (!docSnap.exists()) {\r\n        alert(\"Queue has been removed.\");\r\n        navigate('/invalid-queue');\r\n        return;\r\n      }\r\n      const data = docSnap.data();\r\n      // Update current user info from queue\r\n      const currentUser = data.users ? data.users.find(u => u.userId === userId) : null;\r\n      if (currentUser) {\r\n        setWelcomeMessage(`Welcome ${currentUser.name} (${currentUser.email})`);\r\n        setPosition(currentUser.position);\r\n        // Calculate estimated wait time based on the user's position\r\n        setEstWaitTime(currentUser.position * averageServiceTime);\r\n        if (currentUser.position === 0) {\r\n          setIsBeingServed(true);\r\n          if (!notified) {\r\n            setNotified(true);\r\n            alert(\"It's your turn now!\");\r\n          }\r\n        } else {\r\n          setIsBeingServed(false);\r\n        }\r\n      } else if (isBeingServed) {\r\n        navigate('/farewell');\r\n      }\r\n    });\r\n    return () => unsubscribe();\r\n  }, [queueId, userId, navigate, notified, isBeingServed, averageServiceTime]);\r\n\r\n  const leaveQueue = async () => {\r\n    const queueRef = doc(db, \"queues\", queueId);\r\n    const queueSnap = await getDoc(queueRef);\r\n    if (!queueSnap.exists()) return;\r\n    const data = queueSnap.data();\r\n    let updatedUsers = data.users.filter(u => u.userId !== userId);\r\n    // Reassign positions after the user leaves\r\n    updatedUsers = updatedUsers.map((u, index) => ({ ...u, position: index }));\r\n    await updateDoc(queueRef, { users: updatedUsers });\r\n    alert(\"You have left the queue.\");\r\n    navigate(isBeingServed ? '/farewell' : `/join-queue?queueId=${queueId}`);\r\n  };\r\n\r\n  return (\r\n    <div className=\"queue-status\">\r\n      <div id=\"welcomeMessage\">{welcomeMessage}</div>\r\n      <h2>Queue Status</h2>\r\n      <div className=\"position-display\">\r\n        <h2>{isBeingServed ? \"It's your turn!\" : \"Your Position\"}</h2>\r\n        <div className=\"position-number\">{position}</div>\r\n      </div>\r\n      <p>Estimated wait time: {estWaitTime} minutes</p>\r\n      <button id=\"leaveQueueBtn\" className=\"btn\" onClick={leaveQueue}>Leave Queue</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default QueueStatus;\r\n"],"names":["firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","app","initializeApp","auth","getAuth","db","getFirestore","messaging","getMessaging","onMessage","payload","console","log","alert","notification","title","body","QueueStatus","position","setPosition","useState","estWaitTime","setEstWaitTime","welcomeMessage","setWelcomeMessage","notified","setNotified","isBeingServed","setIsBeingServed","searchParams","useSearchParams","queueId","get","userId","navigate","useNavigate","useEffect","queueRef","doc","unsubscribe","onSnapshot","docSnap","exists","data","currentUser","users","find","u","name","email","_jsxs","className","children","_jsx","id","onClick","async","queueSnap","getDoc","updatedUsers","filter","map","index","updateDoc"],"sourceRoot":""}