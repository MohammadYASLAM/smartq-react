{"version":3,"file":"static/js/102.8049cd06.chunk.js","mappings":"iPAMA,MAAMA,EAAiB,CACrBC,OAAQ,0CACRC,WAAY,+BACZC,UAAW,eACXC,cAAe,mCACfC,kBAAmB,eACnBC,MAAO,6CAGHC,GAAMC,EAAAA,EAAAA,eAAcR,GACpBS,GAAOC,EAAAA,EAAAA,SAAQH,GACfI,GAAKC,EAAAA,EAAAA,cAAaL,GAClBM,GAAYC,EAAAA,EAAAA,cAAaP,IAe/BQ,EAAAA,EAAAA,WAAUF,GAAYG,IACpBC,QAAQC,IAAI,oBAAqBF,GACjCG,MAAM,iBAAiBH,EAAQI,aAAaC,WAAWL,EAAQI,aAAaE,OAAO,I,gLC7BrF,MA+DA,EA/DoBC,KAClB,MAAOC,EAAcC,IAAmBC,EAAAA,EAAAA,UAAS,OAC1CC,EAAaC,IAAkBF,EAAAA,EAAAA,UAAS,OACxCG,EAASC,IAAcJ,EAAAA,EAAAA,WAAS,IAChCK,EAAWC,IAAgBN,EAAAA,EAAAA,UAAS,MAGrCO,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MACXC,EAAe,IAAIC,gBAAgBL,EAASM,QAC5CC,EAAUH,EAAaI,IAAI,WAC3BC,EAASL,EAAaI,IAAI,UAyChC,OApCAE,EAAAA,EAAAA,YAAU,KAER,IAAKH,IAAYE,EAEf,YADAP,EAAS,kBAKX,MAAMS,GAAWC,EAAAA,EAAAA,KAAIlC,EAAAA,GAAI,SAAU6B,GAC7BM,GAAcC,EAAAA,EAAAA,YAAWH,GAAWI,IACxC,IAAKA,EAAQC,SAEX,YADAd,EAAS,kBAGX,MAAMe,EAAOF,EAAQE,OACrBlB,EAAakB,GAGb,MAAMC,EAASD,EAAKE,MAAQF,EAAKE,MAAMC,MAAKC,GAAKA,EAAEZ,SAAWA,IAAU,KACpES,GAEF1B,EAAgB0B,EAAOI,UACvB3B,EAxBqB,EAwBNuB,EAAOI,WAGtBpB,EAAS,aAEXL,GAAW,EAAM,IAChB0B,IACDvC,QAAQuC,MAAM,4BAA6BA,GAC3C1B,GAAW,EAAM,IAGnB,MAAO,IAAMgB,GAAa,GACzB,CAACN,EAASE,EAAQP,EApCM,IAsCvBN,GAAgB4B,EAAAA,EAAAA,KAAA,KAAAC,SAAG,8BAGrBC,EAAAA,EAAAA,MAAA,OAAKC,MAAO,CAAEC,SAAU,QAASC,OAAQ,SAAUC,QAAS,OAAQC,UAAW,UAAWN,SAAA,EACxFD,EAAAA,EAAAA,KAAA,MAAAC,SAAI,uBACJC,EAAAA,EAAAA,MAAA,KAAAD,SAAA,CAAG,kBAAiC,OAAjBlC,EAAwBA,EAAe,SAC1DmC,EAAAA,EAAAA,MAAA,KAAAD,SAAA,CAAG,wBAAsC,OAAhB/B,EAAuBA,EAAc,KAAK,gBAC/D,E","sources":["firebase/firebase-config.js","pages/QueueStatus.js"],"sourcesContent":["// src/firebase/firebase-config.js\r\nimport { initializeApp } from \"https://www.gstatic.com/firebasejs/10.11.1/firebase-app.js\";\r\nimport { getAuth } from \"https://www.gstatic.com/firebasejs/10.11.1/firebase-auth.js\";\r\nimport { getFirestore } from \"https://www.gstatic.com/firebasejs/10.11.1/firebase-firestore.js\";\r\nimport { getMessaging, getToken, onMessage } from \"https://www.gstatic.com/firebasejs/10.11.1/firebase-messaging.js\";\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyAhBlyXYwfLE1rXPcWRiouJfsp6gIpG894\",\r\n  authDomain: \"smartq-d015b.firebaseapp.com\",\r\n  projectId: \"smartq-d015b\",\r\n  storageBucket: \"smartq-d015b.firebasestorage.app\",\r\n  messagingSenderId: \"452644823738\",\r\n  appId: \"1:452644823738:web:7a133f086ff93200b39883\"\r\n};\r\n\r\nconst app = initializeApp(firebaseConfig);\r\nconst auth = getAuth(app);\r\nconst db = getFirestore(app);\r\nconst messaging = getMessaging(app);\r\n\r\n// Request notification permission if needed\r\nexport async function requestNotificationPermission() {\r\n  try {\r\n    const token = await getToken(messaging, { vapidKey: \"YOUR_VAPID_PUBLIC_KEY\" });\r\n    if (token) {\r\n      console.log(\"Notification Token:\", token);\r\n      return token;\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Notification permission error:\", error);\r\n  }\r\n}\r\n\r\nonMessage(messaging, (payload) => {\r\n  console.log(\"Message received:\", payload);\r\n  alert(`Notification: ${payload.notification.title} - ${payload.notification.body}`);\r\n});\r\n\r\nexport { auth, db, messaging };\r\n","// src/pages/QueueStatus.js\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nimport { db } from '../firebase/firebase-config';\r\nimport { doc, onSnapshot } from 'https://www.gstatic.com/firebasejs/10.11.1/firebase-firestore.js';\r\n\r\nconst QueueStatus = () => {\r\n  const [userPosition, setUserPosition] = useState(null);\r\n  const [estWaitTime, setEstWaitTime] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [queueData, setQueueData] = useState(null);\r\n  \r\n  // Use useLocation to extract query parameters\r\n  const location = useLocation();\r\n  const navigate = useNavigate();\r\n  const searchParams = new URLSearchParams(location.search);\r\n  const queueId = searchParams.get('queueId');\r\n  const userId = searchParams.get('userId');\r\n  \r\n  // Define an average service time per person (in minutes)\r\n  const averageServiceTime = 5;\r\n\r\n  useEffect(() => {\r\n    // If either queueId or userId is missing, redirect to an error/farewell page.\r\n    if (!queueId || !userId) {\r\n      navigate('/invalid-queue');\r\n      return;\r\n    }\r\n    \r\n    // Set up a real-time listener for the queue document\r\n    const queueRef = doc(db, \"queues\", queueId);\r\n    const unsubscribe = onSnapshot(queueRef, (docSnap) => {\r\n      if (!docSnap.exists()) {\r\n        navigate('/invalid-queue');\r\n        return;\r\n      }\r\n      const data = docSnap.data();\r\n      setQueueData(data);\r\n      \r\n      // Look for the current user in the queue data.\r\n      const myUser = data.users ? data.users.find(u => u.userId === userId) : null;\r\n      if (myUser) {\r\n        // Set the user's position and calculate wait time based on that position.\r\n        setUserPosition(myUser.position);\r\n        setEstWaitTime(myUser.position * averageServiceTime);\r\n      } else {\r\n        // If the user is no longer found (maybe they left), redirect to a farewell page.\r\n        navigate('/farewell');\r\n      }\r\n      setLoading(false);\r\n    }, error => {\r\n      console.error('Error loading queue data:', error);\r\n      setLoading(false);\r\n    });\r\n    \r\n    return () => unsubscribe();\r\n  }, [queueId, userId, navigate, averageServiceTime]);\r\n  \r\n  if (loading) return <p>Loading queue details...</p>;\r\n  \r\n  return (\r\n    <div style={{ maxWidth: '400px', margin: '0 auto', padding: '1rem', textAlign: 'center' }}>\r\n      <h2>Your Queue Status</h2>\r\n      <p>Your Position: {userPosition !== null ? userPosition : '--'}</p>\r\n      <p>Estimated Wait Time: {estWaitTime !== null ? estWaitTime : '--'} minutes</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default QueueStatus;\r\n"],"names":["firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","app","initializeApp","auth","getAuth","db","getFirestore","messaging","getMessaging","onMessage","payload","console","log","alert","notification","title","body","QueueStatus","userPosition","setUserPosition","useState","estWaitTime","setEstWaitTime","loading","setLoading","queueData","setQueueData","location","useLocation","navigate","useNavigate","searchParams","URLSearchParams","search","queueId","get","userId","useEffect","queueRef","doc","unsubscribe","onSnapshot","docSnap","exists","data","myUser","users","find","u","position","error","_jsx","children","_jsxs","style","maxWidth","margin","padding","textAlign"],"sourceRoot":""}