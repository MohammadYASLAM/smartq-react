{"version":3,"file":"static/js/841.ae824f0e.chunk.js","mappings":"sJAIA,MAqBA,EArBwBA,IAA6C,IAC/DC,GADmB,QAAEC,EAAO,MAAEC,EAAQ,IAAG,OAAEC,EAAS,KAAKJ,EAO3DC,EAAU,gDAIZA,EAAUA,EAAQI,QAAQ,OAAQ,IAGlC,MAAMC,EAAS,GAAGL,0BAAgCC,IAIlD,OAFAK,QAAQC,IAAI,eAAgBF,IAErBG,EAAAA,EAAAA,KAACC,EAAAA,EAAY,CAACC,MAAOL,EAAQM,KAAMT,GAAS,C,uJChBrD,MAAMU,EAAiB,CACrBC,OAAQ,0CACRC,WAAY,+BACZC,UAAW,eACXC,cAAe,mCACfC,kBAAmB,eACnBC,MAAO,6CAGHC,GAAMC,EAAAA,EAAAA,eAAcR,GACpBS,GAAOC,EAAAA,EAAAA,SAAQH,GACfI,GAAKC,EAAAA,EAAAA,cAAaL,GAClBM,GAAYC,EAAAA,EAAAA,cAAaP,IAe/BQ,EAAAA,EAAAA,WAAUF,GAAYG,IACpBtB,QAAQC,IAAI,oBAAqBqB,GACjCC,MAAM,iBAAiBD,EAAQE,aAAaC,WAAWH,EAAQE,aAAaE,OAAO,I,wLC5BrF,MAuBA,EAvBkBC,KAChB,MAAOC,IAAgBC,EAAAA,EAAAA,MACjBlC,EAAUiC,EAAaE,IAAI,WAYjC,OAVAC,EAAAA,EAAAA,YAAU,KAER,MAAMC,GAAcC,EAAAA,EAAAA,aAAWC,EAAAA,EAAAA,KAAIjB,EAAAA,GAAI,SAAUtB,IAAWwC,IACrDA,EAAQC,QACX,IAGJ,MAAO,IAAMJ,GAAa,GACzB,CAACrC,KAGF0C,EAAAA,EAAAA,MAAA,OAAKC,UAAU,eAAcC,SAAA,EAC3BrC,EAAAA,EAAAA,KAAA,MAAAqC,SAAI,yBAEJrC,EAAAA,EAAAA,KAACsC,EAAAA,EAAe,CAAC7C,QAASA,EAASC,MAAO,IAAKC,OAAQ,QACnD,E","sources":["components/QRCodeGenerator.js","firebase/firebase-config.js","pages/UserQueue.js"],"sourcesContent":["// src/components/QRCodeGenerator.js\r\nimport React from 'react';\r\nimport { QRCodeCanvas } from 'qrcode.react';\r\n\r\nconst QRCodeGenerator = ({ queueId, width = 150, height = 150 }) => {\r\n  let baseUrl;\r\n  if (process.env.NODE_ENV === 'development') {\r\n    // In development, use the origin (e.g., http://localhost:3000)\r\n    baseUrl = window.location.origin;\r\n  } else {\r\n    // In production on GitHub Pages, force the base URL to the full absolute URL.\r\n    baseUrl = \"https://mohammadyaslam.github.io/smartq-react\";\r\n  }\r\n  \r\n  // Remove any trailing slashes to avoid double slashes in the URL\r\n  baseUrl = baseUrl.replace(/\\/+$/, \"\");\r\n\r\n  // Construct the full QR code URL using HashRouter routing\r\n  const qrText = `${baseUrl}/#/join-queue?queueId=${queueId}`;\r\n  \r\n  console.log(\"QR Code URL:\", qrText); // For debugging: check the console output in production\r\n\r\n  return <QRCodeCanvas value={qrText} size={width} />;\r\n};\r\n\r\nexport default QRCodeGenerator;\r\n","// src/firebase/firebase-config.js\r\nimport { initializeApp } from \"https://www.gstatic.com/firebasejs/10.11.1/firebase-app.js\";\r\nimport { getAuth } from \"https://www.gstatic.com/firebasejs/10.11.1/firebase-auth.js\";\r\nimport { getFirestore } from \"https://www.gstatic.com/firebasejs/10.11.1/firebase-firestore.js\";\r\nimport { getMessaging, getToken, onMessage } from \"https://www.gstatic.com/firebasejs/10.11.1/firebase-messaging.js\";\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyAhBlyXYwfLE1rXPcWRiouJfsp6gIpG894\",\r\n  authDomain: \"smartq-d015b.firebaseapp.com\",\r\n  projectId: \"smartq-d015b\",\r\n  storageBucket: \"smartq-d015b.firebasestorage.app\",\r\n  messagingSenderId: \"452644823738\",\r\n  appId: \"1:452644823738:web:7a133f086ff93200b39883\"\r\n};\r\n\r\nconst app = initializeApp(firebaseConfig);\r\nconst auth = getAuth(app);\r\nconst db = getFirestore(app);\r\nconst messaging = getMessaging(app);\r\n\r\n// Request notification permission if needed\r\nexport async function requestNotificationPermission() {\r\n  try {\r\n    const token = await getToken(messaging, { vapidKey: \"YOUR_VAPID_PUBLIC_KEY\" });\r\n    if (token) {\r\n      console.log(\"Notification Token:\", token);\r\n      return token;\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Notification permission error:\", error);\r\n  }\r\n}\r\n\r\nonMessage(messaging, (payload) => {\r\n  console.log(\"Message received:\", payload);\r\n  alert(`Notification: ${payload.notification.title} - ${payload.notification.body}`);\r\n});\r\n\r\nexport { auth, db, messaging };\r\n","// src/pages/UserQueue.js\r\nimport React, { useEffect } from 'react';\r\nimport { useSearchParams } from 'react-router-dom';\r\nimport QRCodeGenerator from '../components/QRCodeGenerator';\r\nimport { db } from '../firebase/firebase-config';\r\nimport { doc, onSnapshot } from 'https://www.gstatic.com/firebasejs/10.11.1/firebase-firestore.js';\r\n\r\nconst UserQueue = () => {\r\n  const [searchParams] = useSearchParams();\r\n  const queueId = searchParams.get('queueId');\r\n\r\n  useEffect(() => {\r\n    // Here you could listen for queue updates as in QueueStatus if needed\r\n    const unsubscribe = onSnapshot(doc(db, \"queues\", queueId), (docSnap) => {\r\n      if (!docSnap.exists()) {\r\n        // Handle non-existent queue\r\n      }\r\n    });\r\n    return () => unsubscribe();\r\n  }, [queueId]);\r\n\r\n  return (\r\n    <div className=\"queue-status\">\r\n      <h2>Your Queue Position</h2>\r\n      {/* You can display the status here similarly */}\r\n      <QRCodeGenerator queueId={queueId} width={200} height={200} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UserQueue;\r\n"],"names":["_ref","baseUrl","queueId","width","height","replace","qrText","console","log","_jsx","QRCodeCanvas","value","size","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","app","initializeApp","auth","getAuth","db","getFirestore","messaging","getMessaging","onMessage","payload","alert","notification","title","body","UserQueue","searchParams","useSearchParams","get","useEffect","unsubscribe","onSnapshot","doc","docSnap","exists","_jsxs","className","children","QRCodeGenerator"],"sourceRoot":""}