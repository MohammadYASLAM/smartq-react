{"version":3,"file":"static/js/146.0a9a33b3.chunk.js","mappings":"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","sources":["firebase/firebase-config.js","pages/AuthPage.js"],"sourcesContent":["// src/firebase/firebase-config.js\r\nimport { initializeApp } from \"https://www.gstatic.com/firebasejs/10.11.1/firebase-app.js\";\r\nimport { getAuth } from \"https://www.gstatic.com/firebasejs/10.11.1/firebase-auth.js\";\r\nimport { getFirestore } from \"https://www.gstatic.com/firebasejs/10.11.1/firebase-firestore.js\";\r\nimport { getMessaging, getToken, onMessage } from \"https://www.gstatic.com/firebasejs/10.11.1/firebase-messaging.js\";\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyAhBlyXYwfLE1rXPcWRiouJfsp6gIpG894\",\r\n  authDomain: \"smartq-d015b.firebaseapp.com\",\r\n  projectId: \"smartq-d015b\",\r\n  storageBucket: \"smartq-d015b.firebasestorage.app\",\r\n  messagingSenderId: \"452644823738\",\r\n  appId: \"1:452644823738:web:7a133f086ff93200b39883\"\r\n};\r\n\r\nconst app = initializeApp(firebaseConfig);\r\nconst auth = getAuth(app);\r\nconst db = getFirestore(app);\r\nconst messaging = getMessaging(app);\r\n\r\n// Request notification permission if needed\r\nexport async function requestNotificationPermission() {\r\n  try {\r\n    const token = await getToken(messaging, { vapidKey: \"YOUR_VAPID_PUBLIC_KEY\" });\r\n    if (token) {\r\n      console.log(\"Notification Token:\", token);\r\n      return token;\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Notification permission error:\", error);\r\n  }\r\n}\r\n\r\nonMessage(messaging, (payload) => {\r\n  console.log(\"Message received:\", payload);\r\n  alert(`Notification: ${payload.notification.title} - ${payload.notification.body}`);\r\n});\r\n\r\nexport { auth, db, messaging };\r\n","// src/pages/AuthPage.js\r\nimport React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { auth, db } from '../firebase/firebase-config';\r\nimport { \r\n  signInWithEmailAndPassword, \r\n  createUserWithEmailAndPassword \r\n} from 'https://www.gstatic.com/firebasejs/10.11.1/firebase-auth.js';\r\nimport { doc, setDoc } from 'https://www.gstatic.com/firebasejs/10.11.1/firebase-firestore.js';\r\n\r\n//Define the AuthPage component\r\nconst AuthPage = () => {\r\n  //Track whether we are showing the registration form (true) or the login form (false)\r\n  const [isRegistering, setIsRegistering] = useState(false);\r\n  //storing error msg for user\r\n  const [errorMsg, setErrorMsg] = useState('');\r\n  //Prepare the navigate function so we can redirect after success\r\n  const navigate = useNavigate();\r\n\r\n\r\n  //Function to handle login form submissiom\r\n  const handleLogin = async (e) => {\r\n    e.preventDefault();    // Prevent page reload\r\n    const email = e.target.email.value;\r\n    const password = e.target.password.value;\r\n    setErrorMsg(''); //clear error msg if there wehre any\r\n    try {\r\n      // if login success dirent them to admin dashboard\r\n      await signInWithEmailAndPassword(auth, email, password);\r\n      navigate('/admin/dashboard');\r\n    } catch (error) {\r\n      // if login not sucess display the error msg\r\n      setErrorMsg(error.message);\r\n    }\r\n  };\r\n\r\n\r\n  //Function to handle registration form submission\r\n  const handleRegister = async (e) => {\r\n    e.preventDefault();    // Prevent page reload\r\n    const name = e.target.name.value;\r\n    const email = e.target['reg-email'].value;\r\n    const password = e.target['reg-password'].value;\r\n    const confirmPassword = e.target['confirm-password'].value;\r\n    setErrorMsg('');  //clear error msg if there wehre any\r\n\r\n    //check if password and confimPassword Match\r\n    if (password !== confirmPassword) {\r\n      return setErrorMsg(\"Passwords do not match!\");\r\n    }\r\n    try {\r\n      //Create a new user in Firebase Authentication\r\n      const userCredential = await createUserWithEmailAndPassword(auth, email, password);\r\n      const user = userCredential.user;\r\n      // Save admin details to Firestore\r\n      await setDoc(doc(db, \"admins\", user.uid), { name, email });\r\n      navigate('/admin/dashboard'); //after sussessful resgitarion redirect to admindashboard\r\n    } catch (error) {\r\n      setErrorMsg(error.message); // not susscesful register  show error msg\r\n    }\r\n  };\r\n\r\n  //Render the form UI\r\n  return (\r\n    <div className=\"form-container\">\r\n      {isRegistering ? (\r\n        <form onSubmit={handleRegister}>\r\n          <h2>Admin Register</h2>\r\n           {/* Show error message if one exists */}\r\n          {errorMsg && <p style={{ color: 'red' }}>{errorMsg}</p>}\r\n          <label>Name</label>\r\n          <input type=\"text\" name=\"name\" placeholder=\"Enter your name\" required />\r\n          <label>Email</label>\r\n          <input type=\"email\" name=\"reg-email\" placeholder=\"Enter your email\" required />\r\n          <label>Password</label>\r\n          <input type=\"password\" name=\"reg-password\" placeholder=\"Enter your password\" required />\r\n          <label>Confirm Password</label>\r\n          <input type=\"password\" name=\"confirm-password\" placeholder=\"Confirm your password\" required />\r\n          <button type=\"submit\">Register</button>\r\n          <p>\r\n            Already have an account?{' '}\r\n            <span style={{ color: 'blue', cursor: 'pointer' }} onClick={() => setIsRegistering(false)}>\r\n              Login\r\n            </span>\r\n          </p>\r\n        </form>\r\n      ) : (\r\n        <form onSubmit={handleLogin}>\r\n          <h2>Admin Login</h2>\r\n           {/* Show error message if one exists */}\r\n          {errorMsg && <p style={{ color: 'red' }}>{errorMsg}</p>}\r\n          <label>Email</label>\r\n          <input type=\"email\" name=\"email\" placeholder=\"Enter your email\" required />\r\n          <label>Password</label>\r\n          <input type=\"password\" name=\"password\" placeholder=\"Enter your password\" required />\r\n          <button type=\"submit\">Login</button>\r\n          <p>\r\n            Don't have an account?{' '}\r\n            <span style={{ color: 'blue', cursor: 'pointer' }} onClick={() => setIsRegistering(true)}>\r\n              Register\r\n            </span>\r\n          </p>\r\n        </form>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AuthPage;\r\n"],"names":["firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","app","initializeApp","auth","getAuth","db","getFirestore","messaging","getMessaging","onMessage","payload","console","log","alert","notification","title","body","AuthPage","isRegistering","setIsRegistering","useState","errorMsg","setErrorMsg","navigate","useNavigate","_jsx","className","children","_jsxs","onSubmit","async","e","preventDefault","name","target","value","email","password","confirmPassword","user","createUserWithEmailAndPassword","setDoc","doc","uid","error","message","style","color","type","placeholder","required","cursor","onClick","signInWithEmailAndPassword"],"sourceRoot":""}